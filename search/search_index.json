{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to RadBurst Documentation","text":"<p>This documentation provides a guide to the software developed for the MDP Heliophysics Research Team. The goal is to detect and classify solar radio bursts from spectrogram data collected by our LWA antennas.</p> <p>Below are links to key sections of the documentation:</p>"},{"location":"#developer-guide","title":"Developer Guide","text":"<ul> <li>Installation: Instructions for setting up the project on your local machine.</li> <li>Development Workflow: Best practices and guidelines for contributing to the project.</li> <li>Updating Documentation: Instructions for maintaining and updating documentation.</li> </ul>"},{"location":"#code-reference","title":"Code Reference","text":"<ul> <li>Reference Overview: </li> <li>Utilities: </li> <li>Detection: </li> <li>Classification: </li> </ul>"},{"location":"#examples","title":"Examples","text":"<ul> <li>Examples: </li> </ul>"},{"location":"#repository-structure","title":"Repository Structure","text":"<pre><code>docs/                   # Documentation (.md files)\nsite/                   # Documentation website\ndraft/                  \n    detection/          # Burst detection work\n    classification/     # Burst classification work\n    utils/              # Common utility functions (e.g. load, preprocess, etc.)\nrequirements.txt        # Project dependencies (read by setup.py when \"pip install -e .\" is run)\nmkdocs.yml              # Documentation site settings\n</code></pre>"},{"location":"code_reference/","title":"Overview","text":""},{"location":"code_reference/utils/","title":"Index","text":"<p>overview</p>"},{"location":"code_reference/utils/preprocessing/","title":"Preprocessing Functions","text":"<p>Import preprocessing functions from the <code>preprocessing</code> module:</p> <pre><code>from radburst.utils.preprocessing import standardize_rows\n</code></pre>"},{"location":"code_reference/utils/preprocessing/#radburst.utils.preprocessing","title":"radburst.utils.preprocessing","text":""},{"location":"code_reference/utils/preprocessing/#radburst.utils.preprocessing.standardize_rows","title":"standardize_rows","text":"<pre><code>standardize_rows(arr)\n</code></pre> <p>Standardize each row by subtracting the mean and dividing by the standard deviation.</p> PARAMETER DESCRIPTION <code>arr</code> <p>2D array to standardize.</p> <p> TYPE: <code>ndarray</code> </p> RETURNS DESCRIPTION <p>np.ndarray: Row-standardized 2D array.</p> Source code in <code>radburst/utils/preprocessing.py</code> <pre><code>def standardize_rows(arr):\n    \"\"\"\n    Standardize each row by subtracting the mean and dividing by the standard deviation.\n\n    Args:\n        arr (np.ndarray): 2D array to standardize.\n\n    Returns:\n        np.ndarray: Row-standardized 2D array.\n    \"\"\"\n    mean_per_row = np.mean(arr, axis=1, keepdims=True)\n    std_per_row = np.std(arr, axis=1, keepdims=True)\n\n    # Prevent divide by 0 errors\n    epsilon = 1e-8\n    std_per_row = np.maximum(std_per_row, epsilon)\n\n    return (arr - mean_per_row) / std_per_row\n</code></pre>"},{"location":"code_reference/utils/utils/","title":"Utility Functions","text":"<p>Import utility functions from the <code>utils</code> module:</p> <pre><code>from radburst.utils.utils import load_fits_file\n</code></pre>"},{"location":"code_reference/utils/utils/#radburst.utils.utils","title":"radburst.utils.utils","text":""},{"location":"code_reference/utils/utils/#radburst.utils.utils.load_fits_file","title":"load_fits_file","text":"<pre><code>load_fits_file(fits_file_path, num_freq_chans_to_remove=10)\n</code></pre> <p>Load spectrogram from a FITS into a numpy array.</p> PARAMETER DESCRIPTION <code>fits_file_path</code> <p>Path to .fits file containing the spectrogram data.</p> <p> TYPE: <code>str</code> </p> <code>num_freq_chans_to_remove</code> <p>Optional parameter to remove low frequency channels with bad signal.</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> RETURNS DESCRIPTION <p>np.ndarray: Array</p> Source code in <code>radburst/utils/utils.py</code> <pre><code>def load_fits_file(fits_file_path, num_freq_chans_to_remove=10):\n    \"\"\"Load spectrogram from a FITS into a numpy array.\n\n    Args:\n        fits_file_path (str): Path to .fits file containing the spectrogram data.\n        num_freq_chans_to_remove (int): Optional parameter to remove low frequency channels with bad signal.\n\n    Returns:\n        np.ndarray: Array \n    \"\"\"\n    fits_full_data = astropy.io.fits.open(fits_file_path)\n    fits_array = fits_full_data[0].data[:-num_freq_chans_to_remove,:]\n    return fits_array\n</code></pre>"},{"location":"code_reference/utils/utils/#radburst.utils.utils.plot_spectrogram","title":"plot_spectrogram","text":"<pre><code>plot_spectrogram(spect)\n</code></pre> <p>Plot a spectrogram array.</p> PARAMETER DESCRIPTION <code>spect</code> <p>Array of spectrogram data.</p> <p> TYPE: <code>ndarray</code> </p> RETURNS DESCRIPTION <p>None</p> Source code in <code>radburst/utils/utils.py</code> <pre><code>def plot_spectrogram(spect):\n    \"\"\"Plot a spectrogram array.\n\n    Args:\n        spect (np.ndarray): Array of spectrogram data.\n\n    Returns:\n        None\n    \"\"\"\n    plt.imshow(spect, aspect='auto')    \n</code></pre>"},{"location":"guides/installation/","title":"Installation","text":"<ol> <li>Clone the GitHub repository: <pre><code>git clone https://github.com/Kasper-Heliophysics-MDP/radburst.git\n</code></pre></li> <li>Move into the project directory: <pre><code>cd draft\n</code></pre></li> <li>Set up a virtual enviroment (to isolate dependencies): <pre><code>python3 -m venv .venv .\n</code></pre></li> <li>Activate the virtual enviroment: <pre><code>. .venv/bin/activate\n</code></pre></li> <li>Install the project and dependencies: <pre><code>pip install -e . \n</code></pre> This installs the project as a package (in \"editable\" mode), enabling you to import it throughout the codebase while reflecting changes made without needing to reinstall.</li> </ol>"},{"location":"guides/update_docs/","title":"Updating Documentation","text":"<p>This documentation site is built using MkDocs. MkDocs reads the Markdown (.md) files from the <code>docs/</code> folder and configures the site according to the settings defined in <code>mkdocs.yml</code>.</p> <ol> <li> <p>Edit Documentation Files:     Modify <code>.md</code> files in the <code>docs/</code> directory.</p> </li> <li> <p>Preview Changes Locally:     To preview your changes, run the following command from the project directory:     <pre><code>mkdocs serve\n</code></pre>     This command will provide a link to view the current documentation in your web browser.</p> </li> <li> <p>Build the Static Site: <pre><code>mkdocs build\n</code></pre></p> </li> <li> <p>Deploy the Changes: <pre><code>mkdocs gh-deploy\n</code></pre> This command will build the docs, commit them to the <code>gh-pages</code> branch and push the <code>gh-branch</code> pages branch to GitHub.</p> </li> </ol>"}]}