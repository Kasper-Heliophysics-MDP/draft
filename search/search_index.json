{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to RadBurst Documentation","text":"<p>This documentation provides a guide to the software developed for the MDP Heliophysics Research Team. The goal is to detect and classify solar radio bursts from spectrogram data collected by our LWA antennas.</p> <p>Below are links to key sections of the documentation:</p>"},{"location":"#developer-guide","title":"Developer Guide","text":"<ul> <li>Installation: Instructions for setting up the project on your local machine.</li> <li>Development Workflow: Best practices and guidelines for contributing to the project.</li> <li>Updating Documentation: Instructions for maintaining and updating documentation.</li> </ul>"},{"location":"#code-reference","title":"Code Reference","text":"<ul> <li>Reference Overview: </li> <li>Utilities: </li> <li>Detection: </li> <li>Classification: </li> </ul>"},{"location":"#examples","title":"Examples","text":"<ul> <li>Examples: </li> </ul>"},{"location":"#repository-structure","title":"Repository Structure","text":"<pre><code>data/                   # Explanations and links to datasets and sample data\ndocs/                   # Documentation (.md files)\nnotebooks/              # Jupyter notebooks\n    exploration/        # Notebooks for data exploration, testing ideas and analysis        \n    evaluation/         # Notebooks evaluating models and algorithms\n    examples/           # Notebooks demonstrating how to use code\nradburst/               # Main directory for code developement\n    detection/          # Burst detection code\n    classification/     # Burst classification code\n    utils/              # Common utility functions (e.g. load, preprocess, etc.)\nrequirements.txt        # Project dependencies (read by setup.py when \"pip install -e .\" is run)\nmkdocs.yml              # Configuration for MkDocs documentation\n</code></pre>"},{"location":"code_reference/","title":"Overview","text":""},{"location":"code_reference/utils/","title":"Index","text":"<p>overview</p>"},{"location":"code_reference/utils/preprocessing/","title":"Preprocessing Functions","text":"<p>Import preprocessing functions from the <code>preprocessing</code> module:</p> <pre><code>from radburst.utils.preprocessing import standardize_rows\n</code></pre>"},{"location":"code_reference/utils/preprocessing/#radburst.utils.preprocessing","title":"radburst.utils.preprocessing","text":""},{"location":"code_reference/utils/preprocessing/#radburst.utils.preprocessing.standardize_rows","title":"standardize_rows","text":"<pre><code>standardize_rows(arr)\n</code></pre> <p>Standardize each row by subtracting the mean and dividing by the standard deviation.</p> PARAMETER DESCRIPTION <code>arr</code> <p>2D array to standardize.</p> <p> TYPE: <code>ndarray</code> </p> RETURNS DESCRIPTION <p>np.ndarray: Row-standardized 2D array.</p> Source code in <code>radburst/utils/preprocessing.py</code> <pre><code>def standardize_rows(arr):\n    \"\"\"\n    Standardize each row by subtracting the mean and dividing by the standard deviation.\n\n    Args:\n        arr (np.ndarray): 2D array to standardize.\n\n    Returns:\n        np.ndarray: Row-standardized 2D array.\n    \"\"\"\n    mean_per_row = np.mean(arr, axis=1, keepdims=True)\n    std_per_row = np.std(arr, axis=1, keepdims=True)\n\n    # Prevent divide by 0 errors\n    epsilon = 1e-8\n    std_per_row = np.maximum(std_per_row, epsilon)\n\n    return (arr - mean_per_row) / std_per_row\n</code></pre>"},{"location":"code_reference/utils/utils/","title":"Utility Functions","text":"<p>Import utility functions from the <code>utils</code> module:</p> <pre><code>from radburst.utils.utils import load_fits_file\n</code></pre>"},{"location":"code_reference/utils/utils/#radburst.utils.utils","title":"radburst.utils.utils","text":""},{"location":"code_reference/utils/utils/#radburst.utils.utils.load_fits_file","title":"load_fits_file","text":"<pre><code>load_fits_file(fits_file_path, num_freq_chans_to_remove=10)\n</code></pre> <p>Load spectrogram from a FITS into a numpy array.</p> PARAMETER DESCRIPTION <code>fits_file_path</code> <p>Path to .fits file containing the spectrogram data.</p> <p> TYPE: <code>str</code> </p> <code>num_freq_chans_to_remove</code> <p>Optional parameter to remove low frequency channels with bad signal.</p> <p> TYPE: <code>int</code> DEFAULT: <code>10</code> </p> RETURNS DESCRIPTION <p>np.ndarray: Array</p> Source code in <code>radburst/utils/utils.py</code> <pre><code>def load_fits_file(fits_file_path, num_freq_chans_to_remove=10):\n    \"\"\"Load spectrogram from a FITS into a numpy array.\n\n    Args:\n        fits_file_path (str): Path to .fits file containing the spectrogram data.\n        num_freq_chans_to_remove (int): Optional parameter to remove low frequency channels with bad signal.\n\n    Returns:\n        np.ndarray: Array \n    \"\"\"\n    fits_full_data = astropy.io.fits.open(fits_file_path)\n    fits_array = fits_full_data[0].data[:-num_freq_chans_to_remove,:]\n    return fits_array\n</code></pre>"},{"location":"code_reference/utils/utils/#radburst.utils.utils.plot_spectrogram","title":"plot_spectrogram","text":"<pre><code>plot_spectrogram(spect)\n</code></pre> <p>Plot a spectrogram array.</p> PARAMETER DESCRIPTION <code>spect</code> <p>Array of spectrogram data.</p> <p> TYPE: <code>ndarray</code> </p> RETURNS DESCRIPTION <p>None</p> Source code in <code>radburst/utils/utils.py</code> <pre><code>def plot_spectrogram(spect):\n    \"\"\"Plot a spectrogram array.\n\n    Args:\n        spect (np.ndarray): Array of spectrogram data.\n\n    Returns:\n        None\n    \"\"\"\n    plt.imshow(spect, aspect='auto')    \n</code></pre>"},{"location":"guides/dev_workflow/","title":"Development Workflow","text":"<p>basic steps (add detail):</p> <ul> <li>create branch for feature/fix</li> <li>pull latest updates from main branch to avoid conflicts</li> <li>make changes (update docs as needed)</li> <li>commit</li> <li>push</li> <li>pull request</li> <li>some team member reviews pr and gives feedback if they have any<ul> <li>example feedback: add comments for clarity, include corresponding documentation, improve variable naming, this part could be simplified</li> <li>this process can keep team members informed,  encourage better code quality and help us learn from each other's work</li> </ul> </li> <li>merge branch into main</li> <li>delete branch</li> </ul>"},{"location":"guides/installation/","title":"Installation","text":"<ol> <li>Clone the GitHub repository: <pre><code>git clone https://github.com/Kasper-Heliophysics-MDP/radburst.git\n</code></pre></li> <li>Move into the project directory: <pre><code>cd draft\n</code></pre></li> <li>Set up a virtual enviroment (to isolate dependencies): <pre><code>python3 -m venv .venv .\n</code></pre></li> <li>Activate the virtual enviroment: <pre><code>. .venv/bin/activate\n</code></pre></li> <li>Install the project and dependencies: <pre><code>pip install -e . \n</code></pre> This installs the project as a package (in \"editable\" mode), enabling you to import it throughout the codebase while reflecting changes made without needing to reinstall.</li> </ol>"},{"location":"guides/update_docs/","title":"Updating Documentation","text":"<p>This guide provides instructions for how to update and maintain project documentation. These steps explain how to make changes, preview them and deploy updates to the documentation site.</p> <p>The documentation site is built using MkDocs. MkDocs reads the Markdown (.md) files from the <code>docs/</code> folder and configures the site according to the settings defined in <code>mkdocs.yml</code>.</p>"},{"location":"guides/update_docs/#1-edit-documentation-files","title":"1. Edit Documentation Files","text":"<ul> <li>Modify <code>.md</code> files in the <code>docs/</code> directory.</li> <li>For Markdown (<code>.md</code>) syntax, refer to the Markdown Guide</li> </ul>"},{"location":"guides/update_docs/#2-code-reference","title":"2. Code Reference","text":"<ul> <li>To automatically generate documentation from your code's doctrings (in modules, functions or classes), use the following syntax in your Markdown files: <pre><code>::: radburst.utils.preprocessing\n</code></pre></li> <li>The line above will read the docstrings in <code>preprocessing.py</code> and create structured documentation that explains the functions, their parameters, and return values.</li> <li> <p>The current <code>mkdocs.yml</code> is configured to use Google-style dosctrings. Here's an example of a Google-style docstring for a function:</p> <pre><code>def example_function(param1, param2):\n    \"\"\"Short description of the function.\n\n    Longer description that provides more detail about what the function does,\n    how it operates, and any important considerations. This can include\n    information about the parameters, return values, and any exceptions that\n    might be raised.\n\n    Args:\n        param1 (int): The first parameter to be processed.\n        param2 (float): The second parameter to be processed.\n\n    Returns:\n        bool: True if the operation is successful, False otherwise.\n    \"\"\"\n    return True\n</code></pre> </li> </ul>"},{"location":"guides/update_docs/#3-updating-mkdocsyml","title":"3. Updating <code>mkdocs.yml</code>","text":"<ul> <li>The <code>mkdocs.yml</code> file in the root directory configures the documentation site. Changes to documentation files/structure will need to be reflected here to make sure the site is rendered correctly. </li> <li> <p>Here is a preview of what it looks like:</p> <pre><code>site_name: RadBurst Documentation\nsite_url: https://Kasper-Heliophysics-MDP.github.io/radburst\n\nrepo_name: Kasper-Heliophysics-MDP/radburst\nrepo_url: https://github.com/Kasper-Heliophysics-MDP/radburst\n\nnav:\n- Home: index.md\n- Developer Guide:\n    - Installation: guides/installation.md\n    - Development Workflow: guides/dev_workflow.md\n    - Updating Documentation: guides/update_docs.md\n- Code Reference:\n    - code_reference/index.md\n</code></pre> </li> </ul>"},{"location":"guides/update_docs/#4-preview-changes-locally","title":"4. Preview Changes Locally","text":"<ul> <li>To preview your changes, run the following command from the project directory: <pre><code>mkdocs serve\n</code></pre></li> <li>This will provide a link to view the current documentation in your web browser.</li> </ul>"},{"location":"guides/update_docs/#5-build-the-documentation-site-optional","title":"5. Build the Documentation Site (Optional)","text":"<ul> <li>To generate the static site files without deploying, run: <pre><code>mkdocs build\n</code></pre></li> <li>This will create site files in <code>site/</code>. Note <code>site/</code> is in <code>.gitignore</code> and this build command is automatically run in the following deployment step. Therefore, if changes look good after previewing with <code>mkdocs serve</code>, building is not required.</li> </ul>"},{"location":"guides/update_docs/#6-deploy-the-changes","title":"6. Deploy the Changes","text":"<ul> <li>Once you're satisfied with your changes, they can be deployed: <pre><code>mkdocs gh-deploy\n</code></pre></li> <li>This will build the documentation (if not already built), commit changes to the <code>gh-pages</code> branch and push the <code>gh-pages</code> branch to GitHub. The GitHub repo will host the documentation using <code>gh-pages</code>.</li> </ul>"}]}